#ifndef CHIP8_H
#define CHIP8_H

#include <string>
class chip8
{
public:
    chip8();
    ~chip8();
    void emulate_cycle();
    bool load_game(const std::string &file_name);
    bool drawFlag;
    unsigned char gfx[64 * 32]; // display
    unsigned char key[16];      // Keypad
    //For font visit: https://tobiasvl.github.io/blog/write-a-chip-8-emulator/
    unsigned char chip8_font[80] = {
        0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
        0x20, 0x60, 0x20, 0x20, 0x70, // 1
        0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
        0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
        0x90, 0x90, 0xF0, 0x10, 0x10, // 4
        0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
        0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
        0xF0, 0x10, 0x20, 0x40, 0x40, // 7
        0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
        0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
        0xF0, 0x90, 0xF0, 0x90, 0x90, // A
        0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
        0xF0, 0x80, 0x80, 0x80, 0xF0, // C
        0xE0, 0x90, 0x90, 0x90, 0xE0, // D
        0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
        0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };

    void initialize();

private:
    unsigned short opcode;      // OPCode of Chip8
    unsigned char memory[4096]; // memory of chip8
    unsigned char V[16];        // CPU Register of chip8
    unsigned short I;           // Index register I
    unsigned short PC;          // Program counter
    unsigned char delay_timer;
    unsigned char sound_timer;
    unsigned short stack[16];
    unsigned short sp; //Stack pointer
};

#endif